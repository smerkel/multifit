; *******************************************************************
; Multfit efficient processing of 2D diffraction images
; Copyright (C) 2000-2014 S. Merkel, Universite Lille 1
; http://merkel.zoneo.net/Multifit/
; 
; This program is free software; you can redistribute it and/or
; modify it under the terms of the GNU General Public License
; as published by the Free Software Foundation; either version 2
; of the License, or (at your option) any later version.
; 
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
;

; *************************************** fit2dmac **************

FUNCTION fit2dinput, log, startAz, endAz, interval, directory, basename
macrofile = strtrim(strtrim(directory)+strtrim(basename)+'.mac')
if (endAz lt startAz) then return, "Start azimuth larger than end azimuth!"
ON_IOERROR, BADINPUT
GET_LUN, lun
OPENW, lun, macrofile
printf, lun, "%!*\\ MACRO FOR fit2d"
printf, lun, "%!*\\ generated by Multifit by Sebastien Merkel"
printf, lun, "%!*\\ output files: " + strtrim(directory) + strtrim(basename) + "_***.chi"
printf, lun, "%!*\\ start azimuth: " + STRING(startAz,/PRINT)
printf, lun, "%!*\\ end azimuth: " + STRING(endAz,/PRINT)
printf, lun, "%!*\\ interval: " + STRING(interval,/PRINT)
printf, lun, "%!*\\"
printf, lun, "EXIT"
printf, lun, "POWDER DIFFRACTION (2-D)"
top = (endAz-startAz)/interval
if (top eq 1) then top = 0
for i=0,top do begin
    angle = startAz+i*interval
    anglelow = 1.0*angle-1.0*interval/2.
    anglehigh = 1.0*angle+1.0*interval/2.
    if (anglelow gt 180.) then anglelow = anglelow-360.
    if (anglehigh gt 180.) then anglehigh = anglehigh-360.
    filename = strtrim(directory)+strtrim(basename) + "_" + STRTRIM(STRING(angle,/PRINT),2) + ".chi"
    if ((i eq 0) or (i eq top)) then $
    logit, log, "Integration for delta between " +  STRTRIM(STRING(anglelow,/PRINT),2) + " and " +  STRTRIM(STRING(anglehigh,/PRINT),2) + " to be save in " + filename
    if (i eq 0) then logit, log, "   ..."
    printf, lun, "CAKE"
    printf, lun, "INTEGRATE"
    printf, lun, "O.K."
    printf, lun, "START AZIMUTH"
    printf, lun, STRTRIM(STRING(anglelow,/PRINT),2)
    printf, lun, "END AZIMUTH"
    printf, lun, STRTRIM(STRING(anglehigh,/PRINT),2)
    printf, lun, "AZIMUTH BIN"
    printf, lun, STRTRIM(STRING(1,/PRINT),2)
    printf, lun, "O.K."
    printf, lun, "EXIT"
	if (i eq 0) then begin
		printf, lun, "OPTIONS"
		printf, lun, "Z-AXIS LABEL"
		printf, lun, "Intensity"
		printf, lun, "EXIT"
	endif
    printf, lun, "OUTPUT"
    printf, lun, "CHIPLOT"
    printf, lun, "FILE NAME"
    printf, lun, filename
    printf, lun, "O.K."
    printf, lun, "EXCHANGE"
endfor
printf, lun, "EXIT"
printf, lun, "MACROS / LOG FILE"
printf, lun, "%!*\\ END OF EXPG_IO MACRO FILE"
free_lun, lun
logit, log, "Macro save in file: " + macrofile
return, 1
BADINPUT: return, !ERR_STRING
END

FUNCTION fit2dinputlong, log, inputTiff, inputMar  
common fit2dinputlong, inputdir, outputdir, base, ext, firstS, lastS, digitsS, startAzS, endAzS, intervalS

if (WIDGET_INFO(inputTiff, /BUTTON_SET) eq 1) then begin
    fileFormat = 0
endif else if (WIDGET_INFO(inputMar, /BUTTON_SET) eq 1) then begin
    fileFormat = 1
endif
first =  FIX(FLOAT(firstS[0]))
last = FIX(FLOAT(lastS[0]))
digits = FIX(FLOAT(digitsS[0]))
startAz = FIX(FLOAT(startAzS[0]))
endAz = FIX(FLOAT(endAzS[0]))
interval = FIX(FLOAT(intervalS[0]))
macrofile = strtrim(strtrim(outputdir)+strtrim(base)+'.mac')
logit, log, "Macro file: " + macrofile
if (endAz lt startAz) then return, "Start azimuth larger than end azimuth!"
ON_IOERROR, BADINPUT
GET_LUN, lun
OPENW, lun, macrofile
printf, lun, "%!*\\ MACRO FOR fit2d"
printf, lun, "%!*\\ generated by Multifit by Sebastien Merkel"
fileindex = intformat(first,digits);
filename = strtrim(inputdir) + strtrim(base) + "_" + strtrim(fileindex) + strtrim(ext)
logit, log, "First input file: " + filename
printf, lun, "%!*\\ First input file: " + filename
fileindex = intformat(last,digits);
filename = strtrim(inputdir) + strtrim(base) + "_" + strtrim(fileindex) + strtrim(ext)
logit, log, "Last input file: " + filename
printf, lun, "%!*\\ Last input file: \n    " + filename
fileindex = intformat(first,digits);
filename1 = strtrim(outputdir) + strtrim(base) + "_" + strtrim(fileindex) + "_" + strtrim(string(startAz),2) + ".chi"
filename2 = strtrim(outputdir) + strtrim(base) + "_" + strtrim(fileindex) + "_" + strtrim(string(endAz),2) + ".chi"
printf, lun, "%!*\\ output files:"
printf, lun, "%!*\\   " + filename1 + " ---- " + filename2
printf, lun, "%!*\\    ------ "
fileindex = intformat(last,digits);
filename1 = strtrim(outputdir) + strtrim(base) + "_" + strtrim(fileindex) + "_" + strtrim(string(startAz),2) + ".chi"
filename2 = strtrim(outputdir) + strtrim(base) + "_" + strtrim(fileindex) + "_" + strtrim(string(endAz),2) + ".chi"
printf, lun, "%!*\\   " + filename1 + " ---- " + filename2
printf, lun, "%!*\\ start azimuth: " + STRING(startAz,/PRINT)
printf, lun, "%!*\\ end azimuth: " + STRING(endAz,/PRINT)
printf, lun, "%!*\\ interval: " + STRING(interval,/PRINT)
printf, lun, "%!*\\"
printf, lun, "EXIT"
printf, lun, "POWDER DIFFRACTION (2-D)"

topAz  = (endAz-startAz)/interval
if (topAz eq 1) then topAz = 0
topInputs = (last-first)+1
nChi = ((last-first)+1)*topAz
logit, log, "Number of chi files to be created by fit2d: " + strtrim(STRING(nChi,/PRINT),2) 
for j=first,last do begin
	printf, lun, "INPUT"
	fileindex = intformat(j,digits);
	filename = strtrim(inputdir) + strtrim(base) + "_" + strtrim(fileindex) + strtrim(ext)
	printf, lun, filename
	printf, lun, "O.K."
	; If Tiff file, we need a second OK
	if (fileFormat eq 0) then printf, lun, "O.K."
	basechi = strtrim(outputdir) + strtrim(base) + "_" + strtrim(fileindex) + "_"
	logit, log, "Data in " + strtrim(STRING(topAz,/PRINT),2) + " files: " + basechi + strtrim(STRING(startAz,/PRINT),2) + ".chi --- " + basechi + strtrim(STRING(endAz,/PRINT),2) + ".chi"
	for i=0,topAz do begin
		angle = startAz+i*interval
		anglelow = 1.0*angle-1.0*interval/2.
		anglehigh = 1.0*angle+1.0*interval/2.
		if (anglelow gt 180.) then anglelow = anglelow-360.
		if (anglehigh gt 180.) then anglehigh = anglehigh-360.
		filename = strtrim(basechi) + STRTRIM(STRING(angle,/PRINT),2) + ".chi"
		printf, lun, "CAKE"
		printf, lun, "INTEGRATE"
		printf, lun, "O.K."
		printf, lun, "START AZIMUTH"
		printf, lun, STRTRIM(STRING(anglelow,/PRINT),2)
		printf, lun, "END AZIMUTH"
		printf, lun, STRTRIM(STRING(anglehigh,/PRINT),2)
		printf, lun, "AZIMUTH BIN"
		printf, lun, STRTRIM(STRING(1,/PRINT),2)
		printf, lun, "O.K."
		printf, lun, "EXIT"
		if ((i eq 0) and (j eq first)) then begin
			printf, lun, "OPTIONS"
			printf, lun, "Z-AXIS LABEL"
			printf, lun, "Intensity"
			printf, lun, "EXIT"
		endif
		printf, lun, "OUTPUT"
		printf, lun, "CHIPLOT"
		printf, lun, "FILE NAME"
		printf, lun, filename
		printf, lun, "O.K."
		printf, lun, "EXCHANGE"
	endfor
endfor
printf, lun, "EXIT"
printf, lun, "MACROS / LOG FILE"
printf, lun, "%!*\\ END OF EXPG_IO MACRO FILE"
free_lun, lun
logit, log, "Macro save in file: " + macrofile
return, 1
BADINPUT: return, !ERR_STRING
END

; subroutine with GUI to create macro for a single image
PRO fit2dmac_event, ev
WIDGET_CONTROL, ev.TOP, GET_UVALUE=stash
WIDGET_CONTROL, ev.ID, GET_UVALUE=uval
log=stash.log
if (uval eq 'OK') then begin
    WIDGET_CONTROL, stash.fit2dMacAzimuthSt, GET_VALUE=startAz
    WIDGET_CONTROL, stash.fit2dMacAzimuthEnd, GET_VALUE=endAz
    WIDGET_CONTROL, stash.fit2dMacSliceText, GET_VALUE=interval
    WIDGET_CONTROL, stash.fit2dMacDirText, GET_VALUE=directory
    WIDGET_CONTROL, stash.fit2dMacBaseText, GET_VALUE=basename
    logit, log, "Creating macro for fit2d..."
    logit, log, "Fit2d will create files starting with " + basename + "_ with angles from " + startAz + " to " + endAz + " with interval " +  interval
    result = fit2dinput(log, FIX(FLOAT(startAz[0])), FIX(FLOAT(endAz[0])), FIX(FLOAT(interval[0])), directory, basename)
    if (FIX(result) ne 1) then begin
        logit, log, "Macro creation failed"
        tmp = DIALOG_MESSAGE(result, /ERROR)
    endif else begin
        WIDGET_CONTROL, ev.TOP, /DESTROY
    endelse
endif else begin
    logit, log, "Creating macro for fit2d... Cancel."
    WIDGET_CONTROL, ev.TOP, /DESTROY
endelse
END

PRO fit2dmac, base, log
common fonts, titlefont, boldfont, mainfont, avFontHeight
common files, extension, datadirectory, outputdirectory, defaultdirectory, jcpdsdirectory
fit2d = WIDGET_BASE(/COLUMN, Title='Create macro for fit2d (single images)', /MODAL, GROUP_LEADER=base)
fit2dMacLa = WIDGET_LABEL(fit2d, VALUE='Create macro for fit2d (single images)', /ALIGN_center, font=titlefont)
fit2dMacDir = WIDGET_BASE(fit2d, /ROW)
fit2dMacDirLa = WIDGET_LABEL(fit2dMacDir, VALUE='Directory for CHI files export', /ALIGN_LEFT)
fit2dMacDirText = WIDGET_TEXT(fit2dMacDir, VALUE=datadirectory, XSIZE=60)
fit2dMacBase = WIDGET_BASE(fit2d, /ROW)
fit2dMacBaseLa = WIDGET_LABEL(fit2dMacBase, VALUE='Base for filenames', /ALIGN_LEFT)
fit2dMacBaseText = WIDGET_TEXT(fit2dMacBase, VALUE='filename', XSIZE=60, /EDITABLE)
fit2dMacAzimuth = WIDGET_BASE(fit2d, /ROW)
fit2dMacAzimuthLa = WIDGET_LABEL(fit2dMacAzimuth, VALUE='Range for azimuth angles', /ALIGN_LEFT)
fit2dMacAzimuthSt = WIDGET_TEXT(fit2dMacAzimuth, VALUE='0',/ALIGN_LEFT, XSIZE=10, /EDITABLE)
fit2dMacAzimuthLa2 = WIDGET_LABEL(fit2dMacAzimuth, VALUE='to', /ALIGN_LEFT)
fit2dMacAzimuthEnd = WIDGET_TEXT(fit2dMacAzimuth, VALUE='360',/ALIGN_LEFT, XSIZE=10, /EDITABLE)
fit2dMacSlice = WIDGET_BASE(fit2d, /ROW)
fit2dMacSliceLa = WIDGET_LABEL(fit2dMacSlice, VALUE='Sliced size (degrees)', /ALIGN_LEFT)
fit2dMacSliceText = WIDGET_TEXT(fit2dMacSlice, VALUE='5',/ALIGN_LEFT, XSIZE=10, /EDITABLE)
buttons = WIDGET_BASE(fit2d,/ROW, /ALIGN_CENTER)
ok = WIDGET_BUTTON(buttons, VALUE='Ok', UVALUE='OK', xsize=80)
cancel = WIDGET_BUTTON(buttons, VALUE='Cancel', UVALUE='CANCEL', xsize=80)
stash = {log:log, fit2dMacDirText:fit2dMacDirText, fit2dMacBaseText:fit2dMacBaseText, $
         fit2dMacAzimuthSt:fit2dMacAzimuthSt, fit2dMacAzimuthEnd:fit2dMacAzimuthEnd, $
         fit2dMacSliceText:fit2dMacSliceText}
WIDGET_CONTROL, fit2d, SET_UVALUE=stash
WIDGET_CONTROL, fit2d, /REALIZE
XMANAGER, 'fit2dmac', fit2d
END


; subroutine with GUI to create macro for a multiple images

PRO chgDiffDir, base, widget
common files, extension, datadirectory, outputdirectory, defaultdirectory, jcpdsdirectory
result=dialog_pickfile(/DIRECTORY,title='Directory with diffraction data...', path=defaultdirectory, DIALOG_PARENT=base)
if (result ne '') then begin
    WIDGET_CONTROL, widget, SET_VALUE=result
endif
END

PRO fit2dmaclong_event, ev
common fit2dinputlong, inputdir, outputdir, base, ext, first, last, digits, startAz, endAz, interval
WIDGET_CONTROL, ev.TOP, GET_UVALUE=stash
WIDGET_CONTROL, ev.ID, GET_UVALUE=uval
log=stash.log
if (uval eq 'OK') then begin
    WIDGET_CONTROL, stash.fit2dInputText, GET_VALUE=inputdir
    WIDGET_CONTROL, stash.fit2dInputFilesBaseSt, GET_VALUE=base
    WIDGET_CONTROL, stash.fit2dInputFilesFirstSt, GET_VALUE=first
    WIDGET_CONTROL, stash.fit2dInputFilesLastSt, GET_VALUE=last
    WIDGET_CONTROL, stash.fit2dInputFilesDigitsSt, GET_VALUE=digits
    WIDGET_CONTROL, stash.fit2dInputFilesExtSt, GET_VALUE=ext
    WIDGET_CONTROL, stash.fit2dOutputDirText, GET_VALUE=outputdir
    WIDGET_CONTROL, stash.fit2dMacAzStVa, GET_VALUE=startAz
    WIDGET_CONTROL, stash.fit2dMacAzLtVa, GET_VALUE=endAz
    WIDGET_CONTROL, stash.fit2dMacAzInVa, GET_VALUE=interval
    logit, log, "Creating macro for fit2d..."
	; test if the diffraction images can be found
	firstInt =  FIX(FLOAT(first[0]))
	lastInt = FIX(FLOAT(last[0]))
	digitsInt = FIX(FLOAT(digits[0]))
	for index = firstInt, lastInt do begin
		fileindex = intformat(index,digits);
		filename = strtrim(inputdir) + strtrim(base) + "_" + strtrim(fileindex) + strtrim(ext)
		if (FILE_TEST(filename) ne 1) then begin
			messages = strarr(3)
			messages[0] = filename + " can not be found."
			messages[1] = "Fit2d will not find it either."
			messages[2] = "Keep going?"
			tmp = DIALOG_MESSAGE( messages , /QUESTION)
			if (tmp eq 'No') then return
		endif
	endfor
	; 
    result = fit2dinputlong(log, stash.inputTiff, stash.inputMar)
    if (FIX(result) ne 1) then begin
        logit, log, "Macro creation failed"
        tmp = DIALOG_MESSAGE(result, /ERROR)
    endif else begin
        WIDGET_CONTROL, ev.TOP, /DESTROY
    endelse
endif else if (uval eq 'DIFFDIR') then begin
	chgDiffDir, stash.base, stash.fit2dInputText
endif else if (uval eq 'CANCEL') then begin
    logit, log, "Creating macro for fit2d... Cancel."
    WIDGET_CONTROL, ev.TOP, /DESTROY
endif
END

PRO fit2dmaclong, base, log
common fonts, titlefont, boldfont, mainfont, avFontHeight
common files, extension, datadirectory, outputdirectory, defaultdirectory, jcpdsdirectory
fit2d = WIDGET_BASE(/COLUMN, Title='Create macro for fit2d (multiple images)', /MODAL, GROUP_LEADER=base)
fit2dMacLa = WIDGET_LABEL(fit2d, VALUE='Create macro for fit2d (multiple images)', /ALIGN_CENTER, font=titlefont)
; Input files: diffraction images
fit2dInput = WIDGET_BASE(fit2d, /COLUMN, FRAME=1)
fit2dInputDir = WIDGET_BASE(fit2dInput, COLUMN=3)
fit2dInputDirLa = WIDGET_LABEL(fit2dInputDir, VALUE='Directory with diffraction images', /ALIGN_LEFT)
fit2dInputText = WIDGET_TEXT(fit2dInputDir, VALUE='', XSIZE=60)
fit2dInputBu = WIDGET_BUTTON(fit2dInputDir, VALUE='Change', UVALUE='DIFFDIR')
fit2dInputFiles = WIDGET_BASE(fit2dInput, COLUMN=2, /GRID_LAYOUT)
fit2dInputFilesBaseLa = WIDGET_LABEL(fit2dInputFiles, VALUE='Root name of image files', /ALIGN_LEFT)
fit2dInputFilesFirstLa = WIDGET_LABEL(fit2dInputFiles, VALUE='First number', /ALIGN_LEFT)
fit2dInputFilesLastLa = WIDGET_LABEL(fit2dInputFiles, VALUE='Last number', /ALIGN_LEFT)
fit2dInputFilesDigitsLa = WIDGET_LABEL(fit2dInputFiles, VALUE='Number of digits for file numbers', /ALIGN_LEFT)
fit2dInputFilesExtLa = WIDGET_LABEL(fit2dInputFiles, VALUE='Extension', /ALIGN_LEFT)
fit2dInputFilesBaseSt = WIDGET_TEXT(fit2dInputFiles, VALUE='', XSIZE=20, /EDITABLE)
fit2dInputFilesFirstSt = WIDGET_TEXT(fit2dInputFiles, VALUE='', XSIZE=10, /EDITABLE)
fit2dInputFilesLastSt = WIDGET_TEXT(fit2dInputFiles, VALUE='', XSIZE=10, /EDITABLE)
fit2dInputFilesDigitsSt = WIDGET_TEXT(fit2dInputFiles, VALUE='', XSIZE=10, /EDITABLE)
fit2dInputFilesExtSt = WIDGET_TEXT(fit2dInputFiles, VALUE='.tiff', XSIZE=10, /EDITABLE)
fit2dInputFormat = WIDGET_BASE(fit2dInput, COLUMN=2)
fit2dInputFormatLa = WIDGET_LABEL(fit2dInputFormat, VALUE='File format', /ALIGN_LEFT)
format = Widget_Base(fit2dInputFormat, Column=1, /Exclusive)
inputTiff = Widget_Button(format, Value='Tiff', UVALUE='FORMAT')
inputMar = Widget_Button(format, Value='Mar3450', UVALUE='FORMAT')
; Output files: chi files
fit2dOutput = WIDGET_BASE(fit2d, /COLUMN, FRAME=1)
fit2dOutputDir = WIDGET_BASE(fit2dOutput, /ROW)
fit2dOutputDirLa = WIDGET_LABEL(fit2dOutputDir, VALUE='Directory for CHI files export ', /ALIGN_LEFT)
fit2dOutputDirText = WIDGET_TEXT(fit2dOutputDir, VALUE=datadirectory, XSIZE=60)
fit2dOutputFiles = WIDGET_BASE(fit2dOutput, COLUMN=2, /GRID_LAYOUT)
fit2dMacAzStLa = WIDGET_LABEL(fit2dOutputFiles, VALUE='First azimuth angle', /ALIGN_LEFT)
fit2dMacAzLtLa = WIDGET_LABEL(fit2dOutputFiles, VALUE='Last azimuth angle', /ALIGN_LEFT)
fit2dMacAzInLa = WIDGET_LABEL(fit2dOutputFiles, VALUE='Interval', /ALIGN_LEFT)
fit2dMacAzStVa = WIDGET_TEXT(fit2dOutputFiles, VALUE='0',/ALIGN_LEFT, XSIZE=10, /EDITABLE)
fit2dMacAzLtVa = WIDGET_TEXT(fit2dOutputFiles, VALUE='360',/ALIGN_LEFT, XSIZE=10, /EDITABLE)
fit2dMacAzInVa = WIDGET_TEXT(fit2dOutputFiles, VALUE='5',/ALIGN_LEFT, XSIZE=10, /EDITABLE)
; Buttons
buttons = WIDGET_BASE(fit2d,/ROW, /ALIGN_CENTER, /GRID_LAYOUT)
ok = WIDGET_BUTTON(buttons, VALUE='Ok', UVALUE='OK', xsize=80)
cancel = WIDGET_BUTTON(buttons, VALUE='Cancel', UVALUE='CANCEL', xsize=80)
; Finishing up
stash = {log:log, base:fit2d, fit2dInputText:fit2dInputText, fit2dInputFilesBaseSt: fit2dInputFilesBaseSt,  fit2dInputFilesFirstSt: fit2dInputFilesFirstSt, fit2dInputFilesLastSt:fit2dInputFilesLastSt, fit2dInputFilesDigitsSt: fit2dInputFilesDigitsSt, fit2dInputFilesExtSt: fit2dInputFilesExtSt, fit2dOutputDirText:fit2dOutputDirText, fit2dMacAzStVa:fit2dMacAzStVa, fit2dMacAzLtVa:fit2dMacAzLtVa, fit2dMacAzInVa:fit2dMacAzInVa, inputTiff: inputTiff, inputMar: inputMar}
WIDGET_CONTROL, fit2d, SET_UVALUE=stash
WIDGET_CONTROL, fit2d, /REALIZE
XMANAGER, 'fit2dmaclong', fit2d
END

;
; *************************************** fit2d macro id06 **************
; Subroutines to create Fit2d macro with ID06 data
;


FUNCTION fit2dMacroID06, log, stash

; Number of digits for chi loop (set by fit2d)
digitsChiLoop = 5
;  Number of digits for image loop in output (forced)
digitsImageLoop = 3

; extracting variables
WIDGET_CONTROL, stash.dataDirText, GET_VALUE=dataDirText
dataDir = strtrim(dataDirText)
WIDGET_CONTROL, stash.chiDirText, GET_VALUE=chiDirText
chiDir = strtrim(chiDirText)
WIDGET_CONTROL, stash.baseNamesText, GET_VALUE=baseNamesText
baseNames = strtrim(baseNamesText)
WIDGET_CONTROL, stash.firtImageText, GET_VALUE=firtImageText
firstImage = FIX(FLOAT(firtImageText[0]))
WIDGET_CONTROL, stash.lastImageText, GET_VALUE=lastImageText
lastImage = FIX(FLOAT(lastImageText[0]))
WIDGET_CONTROL, stash.digitsImageText, GET_VALUE=digitsImageText
digitsImage = FIX(FLOAT(digitsImageText[0]))
WIDGET_CONTROL, stash.extText, GET_VALUE=extText
ext = strtrim(extText)
WIDGET_CONTROL, stash.xPixelText, GET_VALUE=xPixelText
xPixel = FLOAT(xPixelText[0])
WIDGET_CONTROL, stash.yPixelText, GET_VALUE=yPixelText
yPixel = FLOAT(yPixelText[0])
WIDGET_CONTROL, stash.waveText, GET_VALUE=waveText
wave = FLOAT(waveText[0])
WIDGET_CONTROL, stash.xCenterText, GET_VALUE=xCenterText
xCenter = FLOAT(xCenterText[0])
WIDGET_CONTROL, stash.yCenterText, GET_VALUE=yCenterText
yCenter = FLOAT(yCenterText[0])
WIDGET_CONTROL, stash.detDisText, GET_VALUE=detDisText
detDis = FLOAT(detDisText[0])
WIDGET_CONTROL, stash.tiltRotationText, GET_VALUE=tiltRotationText
tiltRotation = FLOAT(tiltRotationText[0])
WIDGET_CONTROL, stash.tiltAngleText, GET_VALUE=tiltAngleText
tiltAngle = FLOAT(tiltAngleText[0])
WIDGET_CONTROL, stash.detRotText, GET_VALUE=detRotText
detRot = FLOAT(detRotText[0])
WIDGET_CONTROL, stash.detOffsetText, GET_VALUE=detOffsetText
detOffset = FLOAT(detOffsetText[0])
WIDGET_CONTROL, stash.azStartText, GET_VALUE=azStartText
azStart = FLOAT(azStartText[0])
WIDGET_CONTROL, stash.azEndText, GET_VALUE=azEndText
azEnd = FLOAT(azEndText[0])
WIDGET_CONTROL, stash.azBinsText, GET_VALUE=azBinsText
azBins = FIX(FLOAT(azBinsText[0]))
WIDGET_CONTROL, stash.innerRadiusText, GET_VALUE=innerRadiusText
innerRadius = FLOAT(innerRadiusText[0])
WIDGET_CONTROL, stash.outerRadiusText, GET_VALUE=outerRadiusText
outerRadius = FLOAT(outerRadiusText[0])

; Defining name for macro file
macrofile = DIALOG_PICKFILE(PATH=dataDir, TITLE='Select name of fit2d macro file',  FILTER='*.mac', /OVERWRITE_PROMPT,/WRITE, FILE=baseNames+'.mac')
if (macrofile eq '') then return, "No output file selected" 
logit, log, "Macro file: " + macrofile

; Testing that files actually exist. Otherwise, fit2d will crash
if (azEnd lt azStart) then return, "Start azimuth larger than end azimuth!"
for j=firstImage,lastImage do begin
	if (digitsImage eq 0) then fileindex = string(j) else fileindex = intformat(j,digitsImage)
	filename = strtrim(dataDir) + strtrim(baseNames) + "_" + strtrim(fileindex,2) + strtrim(ext)
	; print, "Testing " + filename
	if (FILE_TEST(filename) eq 0) then return, "File " + filename + " not found. Fit2d will crash."
endfor

; We are ready to create a fit2d macro, preparing text
fit2d = "%!*\\ MACRO FOR fit2d" +  STRING(13B) $
	+ "%!*\\ generated by Multifit, S. Merkel, N. Hilairet, J Appl Cryst, 48, 1307-1313 (2015) [doi: 10.1107/S1600576715010390]" + STRING(13B) 
if (digitsImage eq 0) then fileindex = string(firstImage) else fileindex = intformat(firstImage,digitsImage)
filename = strtrim(dataDir) + strtrim(baseNames) + "_" + strtrim(fileindex,2) + strtrim(ext)
fileindex = intformat(firstImage,digitsImageLoop)
firstchi = strtrim(dataDir) + strtrim(baseNames) + "_" + strtrim(fileindex,2) + "_00000.chi"
logit, log, "First input file: " + filename
fit2d +=  "%!*\\ First input file: " + filename + STRING(13B)
if (digitsImage eq 0) then fileindex = string(lastImage) else fileindex = intformat(lastImage,digitsImage)
filename = strtrim(dataDir) + strtrim(baseNames) + "_" + strtrim(fileindex,2) + strtrim(ext)
fileindex = intformat(lastImage,digitsImageLoop)
lastchi = strtrim(dataDir) + strtrim(baseNames) + "_" + strtrim(fileindex,2) + "_" + intformat(azBins,digitsChiLoop) + ".chi"
logit, log, "Last input file: " + filename
fit2d += "%!*\\ Last input file: " + filename + STRING(13B)
nchi = string((lastImage-firstImage+1)*azBins)
logit, log, "Number of chi files generated: " + nchi
fit2d += "%!*\\ Number of chi files generated: " + nchi + STRING(13B)
logit, log, "Output files: " +  firstchi + " to " + lastchi
fit2d += "%!*\\ output files:" $
	+ "%!*\\   " + firstchi + " to " + lastchi + STRING(13B) $
	+ "%!*\\ start azimuth: " + STRING(azStart,/PRINT) + STRING(13B) $
	+ "%!*\\ end azimuth: " + STRING(azEnd,/PRINT) + STRING(13B) $
	+ "%!*\\ number of bins: " + STRING(azBins,/PRINT) + STRING(13B) $
	+ "%!*\\" + STRING(13B) $
	+ "EXIT" + STRING(13B) $
	+ "KEYBOARD INTERFACE" + STRING(13B) $
	+ "variable" + STRING(13B) $
	+ "#first_image" + STRING(13B) $
	+ "integer" + STRING(13B) $
	+ STRTRIM(STRING(firstImage,/PRINT),2) + STRING(13B) $
	+ "variable" + STRING(13B) $
	+ "#last_image" + STRING(13B) $
	+ "integer" + STRING(13B) $
	+ STRTRIM(STRING(lastImage,/PRINT),2) + STRING(13B) $
	+ "variable" + STRING(13B) $
	+ "#path_to_images" + STRING(13B) $
	+ "string" + STRING(13B) $
	+ dataDir + STRING(13B) $
	+ "variable" + STRING(13B) $
	+ "#path_to_chi_files" + STRING(13B) $
	+ "string" + STRING(13B) $
	+ chiDir + STRING(13B) $
	+ "variable" + STRING(13B) $
	+ "#stem" + STRING(13B) $
	+ "string" + STRING(13B) $
	+ baseNames + STRING(13B) $
	+ "variable" + STRING(13B) $
	+ "#X_PIXEL_SIZE" + STRING(13B) $
	+ "real" + STRING(13B) $
	+ STRTRIM(STRING(xPixel,/PRINT),2) + STRING(13B) $
	+ "variable" + STRING(13B) $
	+ "#Y_PIXEL_SIZE" + STRING(13B) $
	+ "real" + STRING(13B) $
	+ STRTRIM(STRING(yPixel,/PRINT),2) + STRING(13B) $
	+ "variable" + STRING(13B) $
	+ "#DISTANCE" + STRING(13B) $
	+ "real" + STRING(13B) $
	+ STRTRIM(STRING(detDis,/PRINT),2) + STRING(13B) $
	+ "variable" + STRING(13B) $
	+ "#WAVELENGTH" + STRING(13B) $
	+ "real" + STRING(13B) $
	+ STRTRIM(STRING(wave,/PRINT),2) + STRING(13B) $
	+ "variable" + STRING(13B) $
	+ "#X_BEAM_CENTRE" + STRING(13B) $
	+ "real" + STRING(13B) $
	+ STRTRIM(STRING(xCenter,/PRINT),2) + STRING(13B) $
	+ "variable" + STRING(13B) $
	+ "#Y_BEAM_CENTRE" + STRING(13B) $
	+ "real" + STRING(13B) $
	+ STRTRIM(STRING(yCenter,/PRINT),2) + STRING(13B) $
	+ "variable" + STRING(13B) $
	+ "#TILT_ROTATION" + STRING(13B) $
	+ "real" + STRING(13B) $
	+ STRTRIM(STRING(tiltRotation,/PRINT),2) + STRING(13B) $
	+ "variable" + STRING(13B) $
	+ "#ANGLE_OF_TILT" + STRING(13B) $
	+ "real" + STRING(13B) $
	+ STRTRIM(STRING(tiltAngle,/PRINT),2) + STRING(13B) $
	+ "variable" + STRING(13B) $
	+ "#DETECTOR_ROTATION" + STRING(13B) $
	+ "real" + STRING(13B) $
	+ STRTRIM(STRING(detRot,/PRINT),2) + STRING(13B) $
	+ "variable" + STRING(13B) $
	+ "#DETECTOR_OFFSET" + STRING(13B) $
	+ "real" + STRING(13B) $
	+ STRTRIM(STRING(detOffset,/PRINT),2) + STRING(13B) $
	+ "variable" + STRING(13B) $
	+ "#START_AZIMUTH" + STRING(13B) $
	+ "real" + STRING(13B) $
	+ STRTRIM(STRING(azStart,/PRINT),2) + STRING(13B) $
	+ "variable" + STRING(13B) $
	+ "#END_AZIMUTH" + STRING(13B) $
	+ "real" + STRING(13B) $
	+ STRTRIM(STRING(azEnd,/PRINT),2) + STRING(13B) $
	+ "variable" + STRING(13B) $
	+ "#INNER_RADIUS" + STRING(13B) $
	+ "real" + STRING(13B) $
	+ STRTRIM(STRING(innerRadius,/PRINT),2) + STRING(13B) $
	+ "variable" + STRING(13B) $
	+ "#OUTER_RADIUS" + STRING(13B) $
	+ "real" + STRING(13B) $
	+ STRTRIM(STRING(outerRadius,/PRINT),2) + STRING(13B) $
	+ "variable" + STRING(13B) $
	+ "#AZIMUTH_BINS" + STRING(13B) $
	+ "integer" + STRING(13B) $
	+ STRTRIM(STRING(azBins,/PRINT),2) + STRING(13B) $
	+ "EXIT" + STRING(13B) $
	+ "%!*\ " + STRING(13B) $
	+ "%!*\ " + STRING(13B) $
	+ "%!*\ " + STRING(13B) $
	+ "%!*\ " + STRING(13B) $
	+ "%!*\ Loop on images" + STRING(13B) $
	+ "%!*\ You should not change anything below this point" + STRING(13B) $
	+ "%!*\ " + STRING(13B) $
	+ "%!*\ " + STRING(13B) $
	+ "%!*\ " + STRING(13B) $
	+ "DO #COUNT = #first_image, #last_image, 1" + STRING(13B) $
	+ "  %!*\ Enter the keybboard interface to define file names" + STRING(13B) $
	+ "  KEYBOARD INTERFACE" + STRING(13B) $
	+ "  I2C" + STRING(13B) $
	+ "  #COUNT" + STRING(13B) $
	+ "  NO" + STRING(13B) $
	+ STRTRIM(STRING(digitsImageLoop,/PRINT),2) + STRING(13B) $
	+ "  #VALUEWITHZERO" + STRING(13B) $
	+ "  concat" + STRING(13B) $
	+ "  #path_to_images" + STRING(13B) $
	+ "  #stem" + STRING(13B) $
	+ "  #image" + STRING(13B)
if (digitsImage eq 0) then begin
	fit2d += "  concat" + STRING(13B) $
	+ "#image" + STRING(13B) $
	+ "_" + STRING(13B) $
	+ "  #image" + STRING(13B) $
	+ "  concat" + STRING(13B) $
	+ "#image" + STRING(13B) $
	+ "#COUNT" + STRING(13B) $
	+ "  #image" + STRING(13B) $
	+ "  concat" + STRING(13B) $
	+ "#image" + STRING(13B) $
	+ ".tif" + STRING(13B) $
	+ "  #image" + STRING(13B)
endif else begin
	fit2d += "  I2C" + STRING(13B) $
	+ "  #COUNT" + STRING(13B) $
	+ "  NO" + STRING(13B) $
	+ STRTRIM(STRING(digitsImage,/PRINT),2) + STRING(13B) $
	+ "  #VALUEFORIMAGEWITHZERO" + STRING(13B) $
	+ "  concat" + STRING(13B) $
	+ "#image" + STRING(13B) $
	+ "_" + STRING(13B) $
	+ "  #image" + STRING(13B) $
	+ "  concat" + STRING(13B) $
	+ "#image" + STRING(13B) $
	+ "#VALUEFORIMAGEWITHZERO" + STRING(13B) $
	+ "  #image" + STRING(13B) $
	+ "  concat" + STRING(13B) $
	+ "#image" + STRING(13B) $
	+ ".tif" + STRING(13B) $
	+ "  #image" + STRING(13B)
endelse
	fit2d += "  concat" + STRING(13B) $
	+ "#stem" + STRING(13B) $
	+ "_" + STRING(13B) $
	+ "  #chistem" + STRING(13B) $
	+ "  concat" + STRING(13B) $
	+ "#chistem" + STRING(13B) $
	+ "#VALUEWITHZERO " + STRING(13B) $
	+ "  #chistem" + STRING(13B) $
	+ "  concat" + STRING(13B) $
	+ "#chistem" + STRING(13B) $
	+ "_ " + STRING(13B) $
	+ "  #chistem" + STRING(13B) $
	+ "  %!*\ Exit the keybboard interface" + STRING(13B) $
	+ "  EXIT" + STRING(13B) $
	+ "  POWDER DIFFRACTION (2-D)" + STRING(13B) $
	+ "  INPUT" + STRING(13B) $
	+ "  #image" + STRING(13B) $
	+ "  O.K." + STRING(13B) $
	+ "  O.K." + STRING(13B) $
	+ "  EXIT" + STRING(13B) $
	+ "%!*\ End of loop on images" + STRING(13B) $
	+ "END DO" + STRING(13B) $
	+ "%!*\ Return to macro" + STRING(13B) $
	+ "MACROS / LOG FILE" + STRING(13B) $
	+ "%!*\ END OF IO MACRO FILE"
ON_IOERROR, BADINPUT
GET_LUN, lun
OPENW, lun, macrofile
printf, lun, fit2d
free_lun, lun
logit, log, "Macro save in file: " + macrofile
return, 1
BADINPUT: return, !ERR_STRING
END


PRO fit2dmacid06_event, ev
common files, extension, datadirectory, outputdirectory, defaultdirectory, jcpdsdirectory
WIDGET_CONTROL, ev.TOP, GET_UVALUE=stash
WIDGET_CONTROL, ev.ID, GET_UVALUE=uval
log=stash.log
if (uval eq 'OK') then begin
    result = fit2dMacroID06(log,stash)
    if (FIX(result) ne 1) then begin
        logit, log, "Macro creation failed"
        tmp = DIALOG_MESSAGE(result, /ERROR)
    endif else begin
        WIDGET_CONTROL, ev.TOP, /DESTROY
    endelse
endif else if (uval eq 'DATADIR') then begin
	result=dialog_pickfile(/DIRECTORY,title='Select directory with diffraction data', path=defaultdirectory, DIALOG_PARENT=base)
	if (result ne '') then WIDGET_CONTROL, stash.dataDirText, SET_VALUE=result
endif else begin
    logit, log, "Creating macro for fit2d... Cancel."
    WIDGET_CONTROL, ev.TOP, /DESTROY
endelse
END


PRO fit2dmacID06, leader, log
common fonts, titlefont, boldfont, mainfont, avFontHeight
common files, extension, datadirectory, outputdirectory, defaultdirectory, jcpdsdirectory
common experiment, wavelength, detectordistance, experimenttype
fit2d = WIDGET_BASE(/COLUMN, Title='Create macro for fit2d (ID06 data, multipe images)', GROUP_LEADER=leader, TAB_MODE=1)
; Options
base = WIDGET_BASE(fit2d, /column)


base2 = WIDGET_BASE(base, /row)
label = WIDGET_LABEL(base2, VALUE='Directory diffraction data', /ALIGN_LEFT, xsize=200)
dataDirText = WIDGET_BUTTON(base2, /ALIGN_LEFT, VALUE='Not set', XSIZE=400, UVALUE='DATADIR') 

base2 = WIDGET_BASE(base, /row)
label = WIDGET_LABEL(base2, VALUE='Directory to save chi files', /ALIGN_LEFT, xsize=200)
chiDirText = WIDGET_TEXT(base2, VALUE=datadirectory, XSIZE=40)

base2 = WIDGET_BASE(base, /row)
label = WIDGET_LABEL(base2, VALUE='Base for file names', /ALIGN_LEFT, xsize=150)
baseNamesText = WIDGET_TEXT(base2, VALUE='filename', XSIZE=10, /EDITABLE)
label = WIDGET_LABEL(base2, VALUE='Extension', /ALIGN_LEFT, xsize=150)
extText = WIDGET_TEXT(base2, VALUE='.tiff', XSIZE=10, /EDITABLE)

base2 = WIDGET_BASE(base, /row)
label = WIDGET_LABEL(base2, VALUE='First image number', /ALIGN_LEFT, xsize=150)
firtImageText = WIDGET_TEXT(base2, VALUE='', XSIZE=10, /EDITABLE)
label = WIDGET_LABEL(base2, VALUE='Last image number', /ALIGN_LEFT, xsize=150)
lastImageText = WIDGET_TEXT(base2, VALUE='', XSIZE=10, /EDITABLE)
label = WIDGET_LABEL(base2, VALUE='Number of digits', /ALIGN_LEFT, xsize=150)
digitsImageText = WIDGET_TEXT(base2, VALUE='3', XSIZE=10, /EDITABLE)


base2 = WIDGET_BASE(base, /row)
label = WIDGET_LABEL(base2, VALUE='X pixel size', /ALIGN_LEFT, xsize=150)
xPixelText = WIDGET_TEXT(base2, VALUE='200.', XSIZE=10, /EDITABLE)
label = WIDGET_LABEL(base2, VALUE='Y pixel size', /ALIGN_LEFT, xsize=150)
yPixelText = WIDGET_TEXT(base2, VALUE='200.', XSIZE=10, /EDITABLE)
label = WIDGET_LABEL(base2, VALUE='Wavelength', /ALIGN_LEFT, xsize=150)
waveText = WIDGET_TEXT(base2, VALUE=strtrim(string(wavelength),2), XSIZE=10, /EDITABLE)

base2 = WIDGET_BASE(base, /row)
label = WIDGET_LABEL(base2, VALUE='X beam center', /ALIGN_LEFT, xsize=150)
xCenterText = WIDGET_TEXT(base2, VALUE='0.', XSIZE=10, /EDITABLE)
label = WIDGET_LABEL(base2, VALUE='Y beam center', /ALIGN_LEFT, xsize=150)
yCenterText = WIDGET_TEXT(base2, VALUE='0.', XSIZE=10, /EDITABLE)
label = WIDGET_LABEL(base2, VALUE='Detec. distance', /ALIGN_LEFT, xsize=150)
detDisText = WIDGET_TEXT(base2, VALUE=strtrim(string(detectordistance),2), XSIZE=10, /EDITABLE)

base2 = WIDGET_BASE(base, /row)
label = WIDGET_LABEL(base2, VALUE='Tilt rotation', /ALIGN_LEFT, xsize=150)
tiltRotationText = WIDGET_TEXT(base2, VALUE='0.', XSIZE=10, /EDITABLE)
label = WIDGET_LABEL(base2, VALUE='Angle of tilt', /ALIGN_LEFT, xsize=150)
tiltAngleText = WIDGET_TEXT(base2, VALUE='0.', XSIZE=10, /EDITABLE)
base2 = WIDGET_BASE(base, /row)
label = WIDGET_LABEL(base2, VALUE='Detec. rotation', /ALIGN_LEFT, xsize=150)
detRotText = WIDGET_TEXT(base2, VALUE='0.', XSIZE=10, /EDITABLE)
label = WIDGET_LABEL(base2, VALUE='Detec. offset (pixels)', /ALIGN_LEFT, xsize=150)
detOffsetText = WIDGET_TEXT(base2, VALUE='400.', XSIZE=10, /EDITABLE)


base2 = WIDGET_BASE(base, /row)
label = WIDGET_LABEL(base2, VALUE='Start for azimuth angles', /ALIGN_LEFT, xsize=150)
azStartText = WIDGET_TEXT(base2, VALUE='0', XSIZE=10, /EDITABLE)
label = WIDGET_LABEL(base2, VALUE='End for azimuth angles', /ALIGN_LEFT, xsize=150)
azEndText = WIDGET_TEXT(base2, VALUE='360', XSIZE=10, /EDITABLE)
label = WIDGET_LABEL(base2, VALUE='Number of bins', /ALIGN_LEFT, xsize=150)
azBinsText = WIDGET_TEXT(base2, VALUE='72', XSIZE=10, /EDITABLE)

base2 = WIDGET_BASE(base, /row)
label = WIDGET_LABEL(base2, VALUE='Inner radius (pixels)', /ALIGN_LEFT, xsize=150)
innerRadiusText = WIDGET_TEXT(base2, VALUE='400', XSIZE=10, /EDITABLE)
label = WIDGET_LABEL(base2, VALUE='Outer radius (pixels)', /ALIGN_LEFT, xsize=150)
outerRadiusText = WIDGET_TEXT(base2, VALUE='2000', XSIZE=10, /EDITABLE)

; Buttons
buttons = WIDGET_BASE(fit2d,/ROW, /ALIGN_CENTER)
ok = WIDGET_BUTTON(buttons, VALUE='Ok', UVALUE='OK', xsize=80)
cancel = WIDGET_BUTTON(buttons, VALUE='Cancel', UVALUE='CANCEL', xsize=80)
stash = {log:log, base:base, dataDirText:dataDirText, chiDirText:chiDirText, baseNamesText:baseNamesText, firtImageText:firtImageText, lastImageText:lastImageText, digitsImageText:digitsImageText, extText:extText, xPixelText:xPixelText, yPixelText:yPixelText, waveText:waveText, xCenterText:xCenterText, yCenterText:yCenterText, detDisText:detDisText, tiltRotationText:tiltRotationText, tiltAngleText:tiltAngleText, detRotText:detRotText, detOffsetText:detOffsetText, azStartText:azStartText, azEndText:azEndText, azBinsText:azBinsText, innerRadiusText:innerRadiusText, outerRadiusText:outerRadiusText}
WIDGET_CONTROL, fit2d, SET_UVALUE=stash
WIDGET_CONTROL, fit2d, /REALIZE
XMANAGER, 'fit2dmacid06', fit2d
END

